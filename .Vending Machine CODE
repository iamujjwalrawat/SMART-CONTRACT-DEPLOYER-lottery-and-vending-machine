// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

contract VendingMachine {

    // State variables
    address public owner;
    mapping (address => uint) public paperboatBalances;

    // Set the owner as the address that deployed the contract
    // Set the initial vending machine balance to 100
    constructor() {
        owner = msg.sender;
        paperboatBalances[address(this)] = 100;
    }

    function getVendingMachineBalance() public view returns (uint) {
        return paperboatBalances[address(this)];
    }

    // Let the owner restock the vending machine
    function restock(uint amount) public {
        require(msg.sender == owner, "Only the owner can restock.");
        paperboatBalances[address(this)] += amount;
    }

    // Purchase paperboats from the vending machine
    function purchase(uint amount) public payable {
        require(msg.value >= amount * 1.75 ether, "You must pay at least 1.75 ETH per paperboat");
        require(paperboatBalances[address(this)] >= amount, "Not enough paperboats in stock to complete this purchase");
        paperboatBalances[address(this)] -= amount;
        paperboatBalances[msg.sender] += amount;
    }

    // Allow the owner to withdraw excess ether
    function withdrawExcessEther() public {
        require(msg.sender == owner, "Only the owner can withdraw excess ether");
        uint contractBalance = address(this).balance;
        uint vendingMachineBalance = paperboatBalances[address(this)] * 1.75 ether;
        uint excessBalance = contractBalance - vendingMachineBalance;
        require(excessBalance > 0, "No excess balance to withdraw");
        payable(owner).transfer(excessBalance);
    }
}
